{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"blog-python-cli-yaml/","text":"Building a CLI application in Python (& some YAML) Around four years ago I started programming in Python and ever since I really enjoy it. At the same time I started using more Linux, first for deploying small experimental applications and later as my personal OS. I really like to find my way around Linux using the terminal, and the concept of a command line interface spoke to me. When there is a good enough reason, for a project, I like to create small applications in Python with a CLI. I would like to share how I've made my most recent CLI with a YAML config file. Setup Firsly I'll setup a small application to create an CLI for: \u279c python-cli-yaml . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 cli.py \u2502 \u251c\u2500\u2500 config.py \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 venv The next thing to do is to make sure the PYTHONPATH environment variable is set. I make sure I'm inside the root folder of the project ( python-cli-yaml ) and then do export PYTHONPATH=$(pwd) . Code Create simple functions In need some functions that I will call later, main.py : WELCOME_MSG = \"Hello world!\" def print_welcome_message(): print(WELCOME_MSG) def print_incoming_message(msg: str): print(\"Incoming message:\", msg) if __name__ == \"__main__\": print_welcome_message() print_incoming_message(\"Foobar!\") We can test these functions simply by running the file python app/main.py Setup CLI I'm using Click for this, so installed it: pip install click In another file I can now start setting up my CLI code, cli.py : import click from app.main import print_welcome_message, print_incoming_message @click.group() def cli(): pass @click.command() def welcome(): print_welcome_message() @click.command() @click.argument('msg', required=True) def echo(msg: str): print_incoming_message(msg) cli.add_command(welcome) cli.add_command(echo) if __name__ == \"__main__\": cli() With this code both simple functions from main can be called: python app/cli.py welcome python app/cli.py echo 'Hi there!' Setup YAML To make it a little bit more interesting I add a configuration file to read, e.g. the welcome message from: touch app-config.txt echo 'welcome_msg: \"Hey you!\"' >> app-config.txt I need some more code to parse this file, config.py : import os import yaml config_file = os.getenv(\"APP_CONFIG_FILE\") print(f\"Config file set to: \", config_file) with open(config_file, 'r') as file: config = yaml.safe_load(file) WELCOME_MSG = config.get('welcome_msg', None) if __name__ == \"__main__\": print(WELCOME_MSG) I'm using a environment variable to point to the config file. Later on I will set this variable from the CLI code. To test this I can run: export APP_CONFIG_FILE=app-config.yml python config.py Now I have all the elements ready, I just need to connect the CLI with the config code. I add a argument to the main cli function and set the input as enviroment variable, cli.py : import os @click.group() @click.option(\"--config\", default=None, help=\"Config file\") def cli(config): os.environ[\"APP_CONFIG_FILE\"] = config ... Now I can run the CLI file and point to the config file from there, no need to set APP_CONFIG_FILE manually: python app/cli_simple.py --config=app-config.yml welcome","title":"Building a CLI application in Python (& some YAML)"},{"location":"blog-python-cli-yaml/#building-a-cli-application-in-python-some-yaml","text":"Around four years ago I started programming in Python and ever since I really enjoy it. At the same time I started using more Linux, first for deploying small experimental applications and later as my personal OS. I really like to find my way around Linux using the terminal, and the concept of a command line interface spoke to me. When there is a good enough reason, for a project, I like to create small applications in Python with a CLI. I would like to share how I've made my most recent CLI with a YAML config file.","title":"Building a CLI application in Python (&amp; some YAML)"},{"location":"blog-python-cli-yaml/#setup","text":"Firsly I'll setup a small application to create an CLI for: \u279c python-cli-yaml . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 cli.py \u2502 \u251c\u2500\u2500 config.py \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 venv The next thing to do is to make sure the PYTHONPATH environment variable is set. I make sure I'm inside the root folder of the project ( python-cli-yaml ) and then do export PYTHONPATH=$(pwd) .","title":"Setup"},{"location":"blog-python-cli-yaml/#code","text":"","title":"Code"},{"location":"blog-python-cli-yaml/#create-simple-functions","text":"In need some functions that I will call later, main.py : WELCOME_MSG = \"Hello world!\" def print_welcome_message(): print(WELCOME_MSG) def print_incoming_message(msg: str): print(\"Incoming message:\", msg) if __name__ == \"__main__\": print_welcome_message() print_incoming_message(\"Foobar!\") We can test these functions simply by running the file python app/main.py","title":"Create simple functions"},{"location":"blog-python-cli-yaml/#setup-cli","text":"I'm using Click for this, so installed it: pip install click In another file I can now start setting up my CLI code, cli.py : import click from app.main import print_welcome_message, print_incoming_message @click.group() def cli(): pass @click.command() def welcome(): print_welcome_message() @click.command() @click.argument('msg', required=True) def echo(msg: str): print_incoming_message(msg) cli.add_command(welcome) cli.add_command(echo) if __name__ == \"__main__\": cli() With this code both simple functions from main can be called: python app/cli.py welcome python app/cli.py echo 'Hi there!'","title":"Setup CLI"},{"location":"blog-python-cli-yaml/#setup-yaml","text":"To make it a little bit more interesting I add a configuration file to read, e.g. the welcome message from: touch app-config.txt echo 'welcome_msg: \"Hey you!\"' >> app-config.txt I need some more code to parse this file, config.py : import os import yaml config_file = os.getenv(\"APP_CONFIG_FILE\") print(f\"Config file set to: \", config_file) with open(config_file, 'r') as file: config = yaml.safe_load(file) WELCOME_MSG = config.get('welcome_msg', None) if __name__ == \"__main__\": print(WELCOME_MSG) I'm using a environment variable to point to the config file. Later on I will set this variable from the CLI code. To test this I can run: export APP_CONFIG_FILE=app-config.yml python config.py Now I have all the elements ready, I just need to connect the CLI with the config code. I add a argument to the main cli function and set the input as enviroment variable, cli.py : import os @click.group() @click.option(\"--config\", default=None, help=\"Config file\") def cli(config): os.environ[\"APP_CONFIG_FILE\"] = config ... Now I can run the CLI file and point to the config file from there, no need to set APP_CONFIG_FILE manually: python app/cli_simple.py --config=app-config.yml welcome","title":"Setup YAML"}]}